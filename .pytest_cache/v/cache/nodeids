[
  "test/test_circular_references.py::test_circular_references",
  "test/test_name_conflict_literal_class.py::test_name_conflict_literal_class",
  "test/test_nested_arrays.py::test_validates",
  "test/test_nested_arrays.py::test_nested_array_regression",
  "test/test_nested_arrays.py::test_array_wrapper",
  "test/test_pattern_properties.py::test_standard_properties_take_precedence",
  "test/test_pattern_properties.py::test_pattern_properties_work[False-foo-hello-False]",
  "test/test_pattern_properties.py::test_pattern_properties_work[False-foobarro-hello-False]",
  "test/test_pattern_properties.py::test_pattern_properties_work[False-foo-24-True]",
  "test/test_pattern_properties.py::test_pattern_properties_work[False-barkeep-24-False]",
  "test/test_pattern_properties.py::test_pattern_properties_work[False-barkeep-John-True]",
  "test/test_pattern_properties.py::test_pattern_properties_work[False-extraprop-John-True]",
  "test/test_pattern_properties.py::test_pattern_properties_work[True-extraprop-John-False]",
  "test/test_pattern_properties.py::test_pattern_properties_work[True-foobar-True-False]",
  "test/test_pattern_properties.py::test_pattern_properties_work[True-foobar-John-True]",
  "test/test_pattern_properties.py::test_pattern_properties_work[True-foobar-24-True]",
  "test/test_pytest.py::test_schema_validation",
  "test/test_pytest.py::test_regression_9",
  "test/test_pytest.py::test_build_classes_is_idempotent",
  "test/test_pytest.py::test_underscore_properties",
  "test/test_pytest.py::test_array_regressions",
  "test/test_pytest.py::test_arrays_can_have_reffed_items_of_mixed_type",
  "test/test_pytest.py::test_regression_39",
  "test/test_pytest.py::test_loads_markdown_schema_extraction",
  "test/test_pytest.py::test_object_builder_loads_memory_references",
  "test/test_pytest.py::test_object_builder_reads_all_definitions",
  "test/test_pytest.py::test_oneOf_validates_against_any_valid[{\"MyData\": \"an address\"}]",
  "test/test_pytest.py::test_oneOf_validates_against_any_valid[{\"MyData\": \"1234\"}]",
  "test/test_pytest.py::test_oneOf_fails_against_non_matching",
  "test/test_pytest.py::test_oneOfBare_validates_against_any_valid[{\"MyAddress\": \"an address\"}]",
  "test/test_pytest.py::test_oneOfBare_validates_against_any_valid[{\"firstName\": \"John\", \"lastName\": \"Winnebago\"}]",
  "test/test_pytest.py::test_oneOfBare_fails_against_non_matching",
  "test/test_pytest.py::test_additional_props_allowed_by_default",
  "test/test_pytest.py::test_additional_props_permitted_explicitly",
  "test/test_pytest.py::test_still_raises_when_accessing_undefined_attrs",
  "test/test_pytest.py::test_permits_deletion_of_additional_properties",
  "test/test_pytest.py::test_additional_props_disallowed_explicitly",
  "test/test_pytest.py::test_objects_can_be_empty",
  "test/test_pytest.py::test_object_equality_should_compare_data",
  "test/test_pytest.py::test_object_allows_attributes_in_oncstructor",
  "test/test_pytest.py::test_object_validates_on_json_decode",
  "test/test_pytest.py::test_object_validates_enumerations",
  "test/test_pytest.py::test_validation_of_mixed_type_enums",
  "test/test_pytest.py::test_objects_allow_non_required_attrs_to_be_missing",
  "test/test_pytest.py::test_objects_require_required_attrs_on_validate",
  "test/test_pytest.py::test_attribute_access_via_dict",
  "test/test_pytest.py::test_attribute_set_via_dict",
  "test/test_pytest.py::test_numeric_attribute_validation",
  "test/test_pytest.py::test_objects_validate_prior_to_serializing",
  "test/test_pytest.py::test_serializing_removes_null_objects",
  "test/test_pytest.py::test_lists_get_serialized_correctly",
  "test/test_pytest.py::test_dictionary_transformation[pdict0]",
  "test/test_pytest.py::test_dictionary_transformation[pdict1]",
  "test/test_pytest.py::test_strict_mode",
  "test/test_pytest.py::test_boolean_in_child_object",
  "test/test_pytest.py::test_default_values[{\"type\": \"boolean\", \"default\": false}]",
  "test/test_pytest.py::test_default_values[{\"type\": \"string\", \"default\": \"Hello\"}]",
  "test/test_pytest.py::test_default_values[{\"type\": \"integer\", \"default\": 500}]",
  "test/test_regression_114.py::test_114",
  "test/test_regression_17.py::test_properties_can_have_multiple_types[Hi]",
  "test/test_regression_17.py::test_properties_can_have_multiple_types[4]",
  "test/test_regression_17.py::test_properties_can_have_multiple_types[None]",
  "test/test_regression_17.py::test_multiply_typed_properties_still_validate[2.4]",
  "test/test_regression_49.py::test_is_valid_jsonschema",
  "test/test_regression_49.py::test_regression_49",
  "test/test_regression_8.py::test_string_properties_compare_to_strings",
  "test/test_regression_8.py::test_arrays_of_strings_compare_to_strings",
  "test/test_regression_8.py::test_arrays_can_be_extended",
  "test/test_regression_8.py::test_array_elements_compare_to_types",
  "test/test_regression_8.py::test_repr_shows_property_values",
  "test/test_regression_8.py::test_str_shows_just_strings",
  "test/test_regression_87.py::test_multiple_objects_are_defined",
  "test/test_regression_88.py::test_nested_arrays_work_fine",
  "test/test_regression_88.py::test_top_level_arrays_are_converted_to_objects_properly",
  "test/test_regression_89.py::test_one_of_types",
  "test/test_regression_90.py::test_null_type",
  "test/test_regression_90.py::test_null_type_one_of",
  "test/test_util_pytest.py::test_ArrayValidator_initializer[kwargs0]",
  "test/test_util_pytest.py::test_ArrayValidator_initializer[kwargs1]",
  "test/test_util_pytest.py::test_ArrayValidator_initializer[kwargs2]",
  "test/test_util_pytest.py::test_ArrayValidator_throws_error_if_not_classes_or_dicts",
  "test/test_util_pytest.py::test_validate_basic_array_types",
  "test/test_util_pytest.py::test_validate_basic_tuple__types",
  "test/test_util_pytest.py::test_validate_arrays_with_object_types",
  "test/test_util_pytest.py::test_validate_arrays_with_mixed_types",
  "test/test_util_pytest.py::test_validate_arrays_nested",
  "test/test_util_pytest.py::test_validate_arrays_length",
  "test/test_util_pytest.py::test_validate_arrays_uniqueness"
]